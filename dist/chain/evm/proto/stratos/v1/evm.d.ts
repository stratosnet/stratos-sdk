import _m0 from 'protobufjs/minimal';
export declare const protobufPackage = "stratos.evm.v1";
/** Params defines the EVM module parameters */
export interface Params {
    /**
     * evm denom represents the token denomination used to run the EVM state
     * transitions.
     */
    evmDenom: string;
    /** enable create toggles state transitions that use the vm.Create function */
    enableCreate: boolean;
    /** enable call toggles state transitions that use the vm.Call function */
    enableCall: boolean;
    /** extra eips defines the additional EIPs for the vm.Config */
    extraEips: number[];
    /** chain config defines the EVM chain configuration parameters */
    chainConfig: ChainConfig | undefined;
    feeMarketParams: FeeMarketParams | undefined;
}
/**
 * ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int values
 * instead of *big.Int.
 */
export interface ChainConfig {
    /** chainId identifies the current chain and is used for replay protection */
    chainId: string;
    /** Homestead switch block (nil no fork, 0 = already homestead) */
    homesteadBlock: string;
    /** TheDAO hard-fork switch block (nil no fork) */
    daoForkBlock: string;
    /** Whether the nodes supports or opposes the DAO hard-fork */
    daoForkSupport: boolean;
    /**
     * EIP150 implements the Gas price changes
     * (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no fork)
     */
    eip150Block: string;
    /** EIP150 HF hash (needed for header only clients as only gas pricing changed) */
    eip150Hash: string;
    /** EIP155Block HF block */
    eip155Block: string;
    /** EIP158 HF block */
    eip158Block: string;
    /** Byzantium switch block (nil no fork, 0 = already on byzantium) */
    byzantiumBlock: string;
    /** Constantinople switch block (nil no fork, 0 = already activated) */
    constantinopleBlock: string;
    /** Petersburg switch block (nil same as Constantinople) */
    petersburgBlock: string;
    /** Istanbul switch block (nil no fork, 0 = already on istanbul) */
    istanbulBlock: string;
    /** Eip-2384 (bomb delay) switch block (nil no fork, 0 = already activated) */
    muirGlacierBlock: string;
    /** Berlin switch block (nil = no fork, 0 = already on berlin) */
    berlinBlock: string;
    /** London switch block (nil = no fork, 0 = already on london) */
    londonBlock: string;
    /** Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already activated) */
    arrowGlacierBlock: string;
    /** EIP-3675 (TheMerge) switch block (nil = no fork, 0 = already in merge proceedings) */
    mergeForkBlock: string;
}
/** State represents a single Storage key value pair item. */
export interface State {
    key: string;
    value: string;
}
/**
 * TransactionLogs define the logs generated from a transaction execution
 * with a given hash. It it used for import/export data as transactions are not
 * persisted on blockchain state after an upgrade.
 */
export interface TransactionLogs {
    hash: string;
    logs: Log[];
}
/**
 * Log represents an protobuf compatible Ethereum Log that defines a contract
 * log event. These events are generated by the LOG opcode and stored/indexed by
 * the node.
 */
export interface Log {
    /** address of the contract that generated the event */
    address: string;
    /** list of topics provided by the contract. */
    topics: string[];
    /** supplied by the contract, usually ABI-encoded */
    data: Uint8Array;
    /** block in which the transaction was included */
    blockNumber: number;
    /** hash of the transaction */
    txHash: string;
    /** index of the transaction in the block */
    txIndex: number;
    /** hash of the block in which the transaction was included */
    blockHash: string;
    /** index of the log in the block */
    index: number;
    /**
     * The Removed field is true if this log was reverted due to a chain
     * reorganisation. You must pay attention to this field if you receive logs
     * through a filter query.
     */
    removed: boolean;
}
/** TxResult stores results of Tx execution. */
export interface TxResult {
    /**
     * contract_address contains the ethereum address of the created contract (if
     * any). If the state transition is an evm.Call, the contract address will be
     * empty.
     */
    contractAddress: string;
    /** bloom represents the bloom filter bytes */
    bloom: Uint8Array;
    /**
     * tx_logs contains the transaction hash and the proto-compatible ethereum
     * logs.
     */
    txLogs: TransactionLogs | undefined;
    /** ret defines the bytes from the execution. */
    ret: Uint8Array;
    /** reverted flag is set to true when the call has been reverted */
    reverted: boolean;
    /** gas_used notes the amount of gas consumed while execution */
    gasUsed: number;
}
/** AccessTuple is the element type of an access list. */
export interface AccessTuple {
    /** hex formatted ethereum address */
    address: string;
    /** hex formatted hashes of the storage keys */
    storageKeys: string[];
}
/** TraceConfig holds extra parameters to trace functions. */
export interface TraceConfig {
    /** custom javascript tracer */
    tracer: string;
    /**
     * overrides the default timeout of 5 seconds for JavaScript-based tracing
     * calls
     */
    timeout: string;
    /** number of blocks the tracer is willing to go back */
    reexec: number;
    /** disable stack capture */
    disableStack: boolean;
    /** disable storage capture */
    disableStorage: boolean;
    /** print output during capture end */
    debug: boolean;
    /** maximum length of output, but zero means unlimited */
    limit: number;
    /** Chain overrides, can be used to execute a trace using future fork rules */
    overrides: ChainConfig | undefined;
    /** enable memory capture */
    enableMemory: boolean;
    /** enable return data capture */
    enableReturnData: boolean;
}
/** Params defines the EVM module parameters */
export interface FeeMarketParams {
    /** no base fee forces the EIP-1559 base fee to 0 (needed for 0 price calls) */
    noBaseFee: boolean;
    /**
     * base fee change denominator bounds the amount the base fee can change
     * between blocks.
     */
    baseFeeChangeDenominator: number;
    /**
     * elasticity multiplier bounds the maximum gas limit an EIP-1559 block may
     * have.
     */
    elasticityMultiplier: number;
    /** height at which the base fee calculation is enabled. */
    enableHeight: number;
    /** base fee for EIP-1559 blocks. */
    baseFee: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    create<I extends {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: number[] | undefined;
        chainConfig?: {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } | undefined;
        feeMarketParams?: {
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } | undefined;
    } & {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: (number[] & number[] & { [K in Exclude<keyof I["extraEips"], keyof number[]>]: never; }) | undefined;
        chainConfig?: ({
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & { [K_1 in Exclude<keyof I["chainConfig"], keyof ChainConfig>]: never; }) | undefined;
        feeMarketParams?: ({
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } & {
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } & { [K_2 in Exclude<keyof I["feeMarketParams"], keyof FeeMarketParams>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof Params>]: never; }>(base?: I | undefined): Params;
    fromPartial<I_1 extends {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: number[] | undefined;
        chainConfig?: {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } | undefined;
        feeMarketParams?: {
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } | undefined;
    } & {
        evmDenom?: string | undefined;
        enableCreate?: boolean | undefined;
        enableCall?: boolean | undefined;
        extraEips?: (number[] & number[] & { [K_4 in Exclude<keyof I_1["extraEips"], keyof number[]>]: never; }) | undefined;
        chainConfig?: ({
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & { [K_5 in Exclude<keyof I_1["chainConfig"], keyof ChainConfig>]: never; }) | undefined;
        feeMarketParams?: ({
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } & {
            noBaseFee?: boolean | undefined;
            baseFeeChangeDenominator?: number | undefined;
            elasticityMultiplier?: number | undefined;
            enableHeight?: number | undefined;
            baseFee?: string | undefined;
        } & { [K_6 in Exclude<keyof I_1["feeMarketParams"], keyof FeeMarketParams>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof Params>]: never; }>(object: I_1): Params;
};
export declare const ChainConfig: {
    encode(message: ChainConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ChainConfig;
    fromJSON(object: any): ChainConfig;
    toJSON(message: ChainConfig): unknown;
    create<I extends {
        chainId?: string | undefined;
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        mergeForkBlock?: string | undefined;
    } & {
        chainId?: string | undefined;
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        mergeForkBlock?: string | undefined;
    } & { [K in Exclude<keyof I, keyof ChainConfig>]: never; }>(base?: I | undefined): ChainConfig;
    fromPartial<I_1 extends {
        chainId?: string | undefined;
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        mergeForkBlock?: string | undefined;
    } & {
        chainId?: string | undefined;
        homesteadBlock?: string | undefined;
        daoForkBlock?: string | undefined;
        daoForkSupport?: boolean | undefined;
        eip150Block?: string | undefined;
        eip150Hash?: string | undefined;
        eip155Block?: string | undefined;
        eip158Block?: string | undefined;
        byzantiumBlock?: string | undefined;
        constantinopleBlock?: string | undefined;
        petersburgBlock?: string | undefined;
        istanbulBlock?: string | undefined;
        muirGlacierBlock?: string | undefined;
        berlinBlock?: string | undefined;
        londonBlock?: string | undefined;
        arrowGlacierBlock?: string | undefined;
        mergeForkBlock?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof ChainConfig>]: never; }>(object: I_1): ChainConfig;
};
export declare const State: {
    encode(message: State, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): State;
    fromJSON(object: any): State;
    toJSON(message: State): unknown;
    create<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K in Exclude<keyof I, keyof State>]: never; }>(base?: I | undefined): State;
    fromPartial<I_1 extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof State>]: never; }>(object: I_1): State;
};
export declare const TransactionLogs: {
    encode(message: TransactionLogs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransactionLogs;
    fromJSON(object: any): TransactionLogs;
    toJSON(message: TransactionLogs): unknown;
    create<I extends {
        hash?: string | undefined;
        logs?: {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[] | undefined;
    } & {
        hash?: string | undefined;
        logs?: ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[] & ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        } & {
            address?: string | undefined;
            topics?: (string[] & string[] & { [K in Exclude<keyof I["logs"][number]["topics"], keyof string[]>]: never; }) | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        } & { [K_1 in Exclude<keyof I["logs"][number], keyof Log>]: never; })[] & { [K_2 in Exclude<keyof I["logs"], keyof {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof TransactionLogs>]: never; }>(base?: I | undefined): TransactionLogs;
    fromPartial<I_1 extends {
        hash?: string | undefined;
        logs?: {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[] | undefined;
    } & {
        hash?: string | undefined;
        logs?: ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[] & ({
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        } & {
            address?: string | undefined;
            topics?: (string[] & string[] & { [K_4 in Exclude<keyof I_1["logs"][number]["topics"], keyof string[]>]: never; }) | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        } & { [K_5 in Exclude<keyof I_1["logs"][number], keyof Log>]: never; })[] & { [K_6 in Exclude<keyof I_1["logs"], keyof {
            address?: string | undefined;
            topics?: string[] | undefined;
            data?: Uint8Array | undefined;
            blockNumber?: number | undefined;
            txHash?: string | undefined;
            txIndex?: number | undefined;
            blockHash?: string | undefined;
            index?: number | undefined;
            removed?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof TransactionLogs>]: never; }>(object: I_1): TransactionLogs;
};
export declare const Log: {
    encode(message: Log, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Log;
    fromJSON(object: any): Log;
    toJSON(message: Log): unknown;
    create<I extends {
        address?: string | undefined;
        topics?: string[] | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: number | undefined;
        txHash?: string | undefined;
        txIndex?: number | undefined;
        blockHash?: string | undefined;
        index?: number | undefined;
        removed?: boolean | undefined;
    } & {
        address?: string | undefined;
        topics?: (string[] & string[] & { [K in Exclude<keyof I["topics"], keyof string[]>]: never; }) | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: number | undefined;
        txHash?: string | undefined;
        txIndex?: number | undefined;
        blockHash?: string | undefined;
        index?: number | undefined;
        removed?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I, keyof Log>]: never; }>(base?: I | undefined): Log;
    fromPartial<I_1 extends {
        address?: string | undefined;
        topics?: string[] | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: number | undefined;
        txHash?: string | undefined;
        txIndex?: number | undefined;
        blockHash?: string | undefined;
        index?: number | undefined;
        removed?: boolean | undefined;
    } & {
        address?: string | undefined;
        topics?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["topics"], keyof string[]>]: never; }) | undefined;
        data?: Uint8Array | undefined;
        blockNumber?: number | undefined;
        txHash?: string | undefined;
        txIndex?: number | undefined;
        blockHash?: string | undefined;
        index?: number | undefined;
        removed?: boolean | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof Log>]: never; }>(object: I_1): Log;
};
export declare const TxResult: {
    encode(message: TxResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxResult;
    fromJSON(object: any): TxResult;
    toJSON(message: TxResult): unknown;
    create<I extends {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: {
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: number | undefined;
    } & {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: ({
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } & {
            hash?: string | undefined;
            logs?: ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] & ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            } & {
                address?: string | undefined;
                topics?: (string[] & string[] & { [K in Exclude<keyof I["txLogs"]["logs"][number]["topics"], keyof string[]>]: never; }) | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            } & { [K_1 in Exclude<keyof I["txLogs"]["logs"][number], keyof Log>]: never; })[] & { [K_2 in Exclude<keyof I["txLogs"]["logs"], keyof {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["txLogs"], keyof TransactionLogs>]: never; }) | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: number | undefined;
    } & { [K_4 in Exclude<keyof I, keyof TxResult>]: never; }>(base?: I | undefined): TxResult;
    fromPartial<I_1 extends {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: {
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: number | undefined;
    } & {
        contractAddress?: string | undefined;
        bloom?: Uint8Array | undefined;
        txLogs?: ({
            hash?: string | undefined;
            logs?: {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] | undefined;
        } & {
            hash?: string | undefined;
            logs?: ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[] & ({
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            } & {
                address?: string | undefined;
                topics?: (string[] & string[] & { [K_5 in Exclude<keyof I_1["txLogs"]["logs"][number]["topics"], keyof string[]>]: never; }) | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            } & { [K_6 in Exclude<keyof I_1["txLogs"]["logs"][number], keyof Log>]: never; })[] & { [K_7 in Exclude<keyof I_1["txLogs"]["logs"], keyof {
                address?: string | undefined;
                topics?: string[] | undefined;
                data?: Uint8Array | undefined;
                blockNumber?: number | undefined;
                txHash?: string | undefined;
                txIndex?: number | undefined;
                blockHash?: string | undefined;
                index?: number | undefined;
                removed?: boolean | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I_1["txLogs"], keyof TransactionLogs>]: never; }) | undefined;
        ret?: Uint8Array | undefined;
        reverted?: boolean | undefined;
        gasUsed?: number | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof TxResult>]: never; }>(object: I_1): TxResult;
};
export declare const AccessTuple: {
    encode(message: AccessTuple, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccessTuple;
    fromJSON(object: any): AccessTuple;
    toJSON(message: AccessTuple): unknown;
    create<I extends {
        address?: string | undefined;
        storageKeys?: string[] | undefined;
    } & {
        address?: string | undefined;
        storageKeys?: (string[] & string[] & { [K in Exclude<keyof I["storageKeys"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof AccessTuple>]: never; }>(base?: I | undefined): AccessTuple;
    fromPartial<I_1 extends {
        address?: string | undefined;
        storageKeys?: string[] | undefined;
    } & {
        address?: string | undefined;
        storageKeys?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["storageKeys"], keyof string[]>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof AccessTuple>]: never; }>(object: I_1): AccessTuple;
};
export declare const TraceConfig: {
    encode(message: TraceConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TraceConfig;
    fromJSON(object: any): TraceConfig;
    toJSON(message: TraceConfig): unknown;
    create<I extends {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: number | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
    } & {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: number | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: ({
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & { [K in Exclude<keyof I["overrides"], keyof ChainConfig>]: never; }) | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I, keyof TraceConfig>]: never; }>(base?: I | undefined): TraceConfig;
    fromPartial<I_1 extends {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: number | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
    } & {
        tracer?: string | undefined;
        timeout?: string | undefined;
        reexec?: number | undefined;
        disableStack?: boolean | undefined;
        disableStorage?: boolean | undefined;
        debug?: boolean | undefined;
        limit?: number | undefined;
        overrides?: ({
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & {
            chainId?: string | undefined;
            homesteadBlock?: string | undefined;
            daoForkBlock?: string | undefined;
            daoForkSupport?: boolean | undefined;
            eip150Block?: string | undefined;
            eip150Hash?: string | undefined;
            eip155Block?: string | undefined;
            eip158Block?: string | undefined;
            byzantiumBlock?: string | undefined;
            constantinopleBlock?: string | undefined;
            petersburgBlock?: string | undefined;
            istanbulBlock?: string | undefined;
            muirGlacierBlock?: string | undefined;
            berlinBlock?: string | undefined;
            londonBlock?: string | undefined;
            arrowGlacierBlock?: string | undefined;
            mergeForkBlock?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["overrides"], keyof ChainConfig>]: never; }) | undefined;
        enableMemory?: boolean | undefined;
        enableReturnData?: boolean | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof TraceConfig>]: never; }>(object: I_1): TraceConfig;
};
export declare const FeeMarketParams: {
    encode(message: FeeMarketParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FeeMarketParams;
    fromJSON(object: any): FeeMarketParams;
    toJSON(message: FeeMarketParams): unknown;
    create<I extends {
        noBaseFee?: boolean | undefined;
        baseFeeChangeDenominator?: number | undefined;
        elasticityMultiplier?: number | undefined;
        enableHeight?: number | undefined;
        baseFee?: string | undefined;
    } & {
        noBaseFee?: boolean | undefined;
        baseFeeChangeDenominator?: number | undefined;
        elasticityMultiplier?: number | undefined;
        enableHeight?: number | undefined;
        baseFee?: string | undefined;
    } & { [K in Exclude<keyof I, keyof FeeMarketParams>]: never; }>(base?: I | undefined): FeeMarketParams;
    fromPartial<I_1 extends {
        noBaseFee?: boolean | undefined;
        baseFeeChangeDenominator?: number | undefined;
        elasticityMultiplier?: number | undefined;
        enableHeight?: number | undefined;
        baseFee?: string | undefined;
    } & {
        noBaseFee?: boolean | undefined;
        baseFeeChangeDenominator?: number | undefined;
        elasticityMultiplier?: number | undefined;
        enableHeight?: number | undefined;
        baseFee?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof FeeMarketParams>]: never; }>(object: I_1): FeeMarketParams;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
