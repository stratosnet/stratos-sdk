import * as stratos from '@stratos-network/stratos-sdk.js';
import dotenv from 'dotenv';
import * as FileDrive from './services/fileDrive';

// import { delay, dirLog, log } from './services/helpers';

dotenv.config();

const password = '1111D';

// that is the mnemonic from the .env file
const { ZERO_MNEMONIC: zeroUserMnemonic = '' } = process.env;

const sdkEnvDev = {
  restUrl: 'https://rest-dev.thestratos.org',
  rpcUrl: 'https://rpc-dev.thestratos.org',
  chainId: 'dev-0',
  explorerUrl: 'https://explorer-dev.thestratos.org',
  faucetUrl: 'https://faucet-dev.thestratos.org/credit',
};

const sdkEnvTest = {
  key: 'testnet',
  name: 'Mesos',
  restUrl: 'https://rest-mesos.thestratos.org',
  rpcUrl: 'https://rpc-mesos.thestratos.org',
  chainId: 'stratos-testnet-2',
  explorerUrl: 'https://big-dipper-mesos.thestratos.org',
  faucetUrl: 'https://faucet-mesos.thestratos.org/credit',
};

const sdkEnvMainNet = {
  key: 'mainnet',
  name: 'Mainnet',
  stratosFaucetDenom: 'stos',
  restUrl: 'https://rest.thestratos.org',
  rpcUrl: 'https://rpc.thestratos.org',
  chainId: 'stratos-1',
  explorerUrl: 'https://big-dipper.thestratos.org',
};

const getBalanceCardMetrics = async (hdPathIndex: number, givenMnemonic: string) => {
  const phrase = stratos.crypto.hdVault.mnemonic.convertStringToArray(givenMnemonic);
  const masterKeySeedInfo = await stratos.crypto.hdVault.keyManager.createMasterKeySeed(
    phrase,
    password,
    hdPathIndex,
  );
  const encryptedMasterKeySeed = masterKeySeedInfo.encryptedMasterKeySeed.toString();
  const derivedKeyPair = await stratos.crypto.hdVault.wallet.deriveKeyPair(
    hdPathIndex,
    password,
    encryptedMasterKeySeed,
  );

  if (!derivedKeyPair) {
    return;
  }
  const balanaces = await stratos.accounts.accountsApi.getBalanceCardMetrics(derivedKeyPair.address);
  // console.log('d', derivedKeyPair.privateKey)

  console.log('balanace card metrics ', balanaces);
};

const getOzoneBalance = async (hdPathIndex: number, givenMnemonic: string) => {
  const keyPairZero = await stratos.crypto.hdVault.wallet.deriveKeyPairFromMnemonic(
    givenMnemonic,
    hdPathIndex,
  );

  if (!keyPairZero) {
    return;
  }

  console.log('keyPairZero in getOzoneBalance', keyPairZero);
  const balance = await stratos.accounts.accountsApi.getOtherBalanceCardMetrics(keyPairZero.address);

  console.log(' new other balanace card metrics ', balance);
};

async function testDecode(hdPathIndex: number, givenMnemonic: string) {
  const userData = {
    data_key: '2z+euHU4QfXfmFutngV76FHBuEZTKLDNP/pnwEs5FXAccLtHeZ2nEmVr9vfupogDJrMsMImKo3izx91qJt703w==',
    data_value:
      ':HFx/7KcJQc1EobOafyoZZi1lVpTLiB56A9sGAy6pCPVjTsJAchxk152URYMF85CMVrhcQlS3S9464nMz7RgH2Q==',
  };

  const phrase = stratos.crypto.hdVault.mnemonic.convertStringToArray(givenMnemonic);

  const masterKeySeedInfo = await stratos.crypto.hdVault.keyManager.createMasterKeySeed(
    phrase,
    password,
    hdPathIndex,
  );
  const encryptedMasterKeySeed = masterKeySeedInfo.encryptedMasterKeySeed.toString();
  const derivedKeyPair = await stratos.crypto.hdVault.wallet.deriveKeyPair(
    hdPathIndex,
    password,
    encryptedMasterKeySeed,
  );

  if (!derivedKeyPair) {
    return;
  }

  const [dataPortion, dataSig] = userData.data_value.split(':');

  const passwordTest = FileDrive.getEncodingPassword(derivedKeyPair);
  // const passwordTest = theP;
  console.log('passwordTest', passwordTest);

  const result = await FileDrive.verifyDataSignature(derivedKeyPair, dataPortion, dataSig);

  if (!result) {
    console.log('!!!! SIGNATURE VERIFICATION HAS FAILED. Data might be compomised  !!!!!');
  }

  const decodedOriginal = await FileDrive.decryptDataItem(dataPortion ?? '', passwordTest);
  console.log('decodedOriginal', (decodedOriginal as any[]).length);

  return decodedOriginal;
}

async function testRedis() {
  const derivedKeyPair = await stratos.crypto.hdVault.wallet.deriveKeyPairFromMnemonic(zeroUserMnemonic, 0);

  if (!derivedKeyPair) {
    return;
  }

  const dataE: Array<{ id: string }> = [];
  const data = [
    {
      id: 1,
      foo: {
        bar: 'aa barfoo aa',
        foobar: true,
      },
      children: ['nope', 'yeah'],
    },

    {
      id: 3,
      foo: {
        bar: '2barfoo then and now',
        foobar: false,
      },
      children: null,
      anotherthing: 'cool',
    },

    {
      id: 2,
      foo: {
        bar: 'barfoo then and now',
        foobar: false,
      },
      children: null,
      anotherthing: 'cool',
    },
  ];

  const sampleData = data;

  const setRes = await FileDrive.sendDataToRedis(derivedKeyPair, sampleData);
  // console.log('setRes', setRes);

  const decodedOriginal = await FileDrive.getDataFromRedis(derivedKeyPair);
  console.log('decoded user data from redis', JSON.stringify(decodedOriginal));
}

async function testEnc(hdPathIndex: number, givenMnemonic: string): Promise<void> {
  const phrase = stratos.crypto.hdVault.mnemonic.convertStringToArray(givenMnemonic);

  const masterKeySeedInfo = await stratos.crypto.hdVault.keyManager.createMasterKeySeed(
    phrase,
    password,
    hdPathIndex,
  );
  const encryptedMasterKeySeed = masterKeySeedInfo.encryptedMasterKeySeed.toString();
  const derivedKeyPair = await stratos.crypto.hdVault.wallet.deriveKeyPair(
    hdPathIndex,
    password,
    encryptedMasterKeySeed,
  );

  if (!derivedKeyPair) {
    return;
  }

  const myData = [
    {
      filehash: 'v05j1m57kooleilka0h3vd89qqbsghv5c6ep8rp0',
      filesize: 20000001,
      filename: 'file20M_4_Jul_20.bin',
      createtime: 1721495200,
    },
    {
      filehash: 'v05j1m57munh91nripv9oa06vf2a0mt7p8n5arh8',
      filesize: 20000001,
      filename: 'file20M_14_Jul_20.bin',
      createtime: 1721513403,
    },
    {
      filehash: 'v05j1m57u6n0s8vt9mmmi18tpoihdvm6qggea4c0',
      filesize: 20000001,
      filename: 'file20M_9_Jul_20.bin',
      createtime: 1721495844,
    },
  ];

  // const sampleData = [...data, ...data];
  const sampleData = myData;

  console.log('sampleData length', sampleData.length);

  // const sampleData = new Array(2).fill({ id: id + 1, derivedKeyPair });
  // console.log('sampleData to store', '\n', sampleData, '\n');

  const dataKey = await FileDrive.getDataItemKey(derivedKeyPair);
  console.log('dataKey', dataKey);
  const signedDataKey = await FileDrive.getSignedDataItemKey(derivedKeyPair);
  console.log('signedDataKey', signedDataKey);

  const passwordTest = FileDrive.getEncodingPassword(derivedKeyPair);

  const redisDataEntity = await FileDrive.buildEncryptedDataEntity(sampleData, derivedKeyPair);

  // console.log('redisDataEntity', redisDataEntity);
  console.log('redisDataEntity.dataSig.length', redisDataEntity.dataSig.length);
  console.log('redisDataEntity.key.length', redisDataEntity.key.length);
  console.log('redisDataEntity.data.length', redisDataEntity.data.length);

  const decodedOriginal = await FileDrive.decryptDataItem(redisDataEntity.data, passwordTest);
  // console.log('decodedOriginal', decodedOriginal);

  const res = await FileDrive.verifyDataSignature(
    derivedKeyPair,
    redisDataEntity.data,
    redisDataEntity.dataSig,
  );

  if (!res) {
    console.log('SIGNATURE VERIFICATION HAS FAILED. Data might be compomised');
  }
}

async function main(): Promise<void> {
  // const sdkEnv = sdkEnvDev;
  const sdkEnv = sdkEnvTest;
  // const sdkEnv = sdkEnvMainNet;
  stratos.Sdk.init({ ...sdkEnv });

  const { resolvedChainID, resolvedChainVersion, isNewProtocol } =
    await stratos.network.networkApi.getChainAndProtocolDetails();

  stratos.Sdk.init({
    ...sdkEnv,
    chainId: resolvedChainID,
    nodeProtocolVersion: resolvedChainVersion,
    isNewProtocol,

    // optional
    // keyPathParameters: keyPathParametersForSdk,
    // devnet
    // ppNodeUrl: 'http://35.187.47.46',
    // ppNodePort: '8142',
    // ppNodeUrl: 'https://sds-dev-pp-8.thestratos.org',
    // ppNodeUrl: 'http://35.233.211.175',
    // ppNodePort: '8080/private/rpc/iKZQw8IMYfkM9Jdo62v_yasNS7A=',
    ppNodeUrl: 'https://sds-gateway-uswest-mesos.thestratos.org/private/rpc/iKZQw8IMYfkM9Jdo62v_yasNS7A=',
    // ppNodePort: 'private/rpc/iKZQw8IMYfkM9Jdo62v_yasNS7A=',
    // mesos - we connect to mesos pp
    // ppNodeUrl: 'http://34.195.137.237',
    // ppNodePort: '8142',
  });

  const hdPathIndex = 0;

  const _cosmosClient = await stratos.chain.cosmos.cosmosService.create(zeroUserMnemonic, hdPathIndex);
  // const a = await stratos.chain.cosmos.cosmosService.getCosmos();

  // Create a wallet and show accounts
  // const wallet = await stratos.chain.cosmos.cosmosWallet.createWalletAtPath(hdPathIndex, zeroUserMnemonic);
  // console.log('wallet', wallet);
  // const a = await wallet.getAccounts();
  // console.log('a', a);
  // await runFaucet(hdPathIndex, zeroUserMnemonic);
  // await mainSdsPrepay(hdPathIndex, zeroUserMnemonic);
  // 1 Check balance
  await getBalanceCardMetrics(hdPathIndex, zeroUserMnemonic);
  // await getOzoneBalance(hdPathIndex, zeroUserMnemonic);
  // const hdPathIndexReceiver = 1;
  // await mainSend(hdPathIndex, zeroUserMnemonic, hdPathIndexReceiver);
  // 1a
  // await testRequestUserFileList(hdPathIndex, 0);
  // await testRequestAllUserFileList(hdPathIndex);
  // 2a - that is the file name - it has to be in ./src
  // const filename = 'file25M_1_Aug_7.bin';

  // for (const myFileName of filesToUpload) {
  //   console.log('myFileName NOW ', myFileName);
  //   await testItFileUpFromBuffer(hdPathIndex, myFileName);
  // }
  // let filename = 'file20M_1_Jul_18.bin';
  // await testItFileUpFromBuffer(hdPathIndex, filename);

  // const filename = 'file100K_Aug_21_v1.bin';
  // await testItFileUpFromBuffer(hdPathIndex, filename);

  // 3a
  // const filehash = 'v05j1m54m10sdhavr6tg8g2dmhng30712l9sisao';
  // const filesize = 10_000_001;
  // const filename = 'file20M_3_Jul_20.bin';
  // const filehash = 'v05j1m50abbkpfmb9o9oc8mgiegcuorfo52l0rv8';
  // const filesize = 20_000_001;
  // filename: 'file10M_May_21_v1.bin',
  // await testFileDl(hdPathIndex, filename, filehash, filesize);
  // 4a
  // await testRequestUserSharedFileList(hdPathIndex, 0);
  // 5a
  // const filehash = 'v05j1m54m10sdhavr6tg8g2dmhng30712l9sisao';
  // await testRequestUserFileShare(hdPathIndex, filehash);
  // 6a
  // const shareid = '2d44dc5f3f8ac6b1';
  // await testRequestUserStopFileShare(hdPathIndex, shareid);
  // 7a
  // const sharelink = 'ICDrUX_2d44dc5f3f8ac6b1';
  // await testRequestUserDownloadSharedFile(hdPathIndex, sharelink, filesize);
  // void testBalanceRound();
  // void testRedis();
  // void testEnc();
  // void testDecode(hdPathIndex, zeroUserMnemonic);
  void testEnc(hdPathIndex, zeroUserMnemonic);
}

void main();
